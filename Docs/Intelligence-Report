

### **The Definitive Plan: Building the "Aesthetic Intelligence" Report**

#### **Core Principle:** The "Single Source of Truth"

Everything we build will be based on the **"Aesthetic Intelligence" Report JSON Schema v3.0**. This is our data contract. For development, we will create a static file (`/src/data/mockReport.ts`) that contains a complete, valid JSON object matching this schema. Our entire UI will be built to render this static data perfectly.

**The Strategic Decision on AI Integration:**
You are right to ask if we can postpone the live integration. **Yes, we will postpone it.** It is the smartest move. By building against a static mock file, we can perfect the entire user experience without being blocked by backend development or API latency. The `reportService.ts` file we create will have a simple function that, for now, just returns the mock data. Later, we will swap its contents to make a live API call using the Gemini 1.5 Pro code you provided. The UI will not know the difference.

---

### **Phase 1: The Report Foundation & Navigation**

**Goal:** To create the skeleton of the report page, including the top navigation and the static data service.

*   **Task 1.1: Create the Report Page and Route**
    *   A new page component will be created at `/src/pages/AnalysisReportPage.tsx`.
    *   A new route `/analysis-report` will be added to `App.tsx` that renders this page.

*   **Task 1.2: Build the Top "Pill Tab" Navigation Component**
    *   A new reusable component, `/src/components/report/TopNavBar.tsx`, will be created.
    *   It will use Tailwind CSS to style the tabs as "pills."
    *   The active tab will have a solid **Bronze** background.
    *   We will use the **Framer Motion** library to create a smooth, animated "sliding" effect for the active tab's background as the user navigates. This will deliver the premium micro-interaction we need.
    *   The navigation will be responsive, collapsing gracefully on smaller screens.

*   **Task 1.3: Implement the Static Data Service**
    *   A new file, `/src/data/mockReport.ts`, will be created. It will contain the full, static v3.0 JSON report data.
    *   A new service, `/src/services/reportService.ts`, will be created. It will have a single async function `getAnalysisReport(clientId: string)`. For now, this function will simply `return mockReportData;`.

---

### **Phase 2: The "Dashboard" Tab (The First Impression)**

**Goal:** To build the most important screen, the high-level summary that the clinician and client see first.

*   **Task 2.1: Build the Layout**
    *   The main "Dashboard" tab will be built with a two-column layout.
*   **Task 2.2: Create the "Key Metrics" Components**
    *   We will create new, specialized components for:
        *   **The "Age Comparison" visual:** Displaying "Biological Age vs. Estimated Skin Age."
        *   **The "Skin Profile" card:** Displaying the Skin Type and Fitzpatrick Scale.
*   **Task 2.3: Create the Interactive "Hotspot" Component**
    *   We will create a placeholder for the 3D face model.
    *   Over this placeholder, we will implement the interactive "hotspots" that, when clicked, will automatically switch to the relevant tab in the report (e.g., clicking the eye area hotspot navigates to the "Aging" tab).

---

### **Phase 3: The Detailed Analysis Tabs (The Core Content)**

**Goal:** To build out the content for the data-rich tabs, creating a reusable template to ensure consistency.

*   **Task 3.1: Create a Reusable "Analysis Card" Component**
    *   We will build a generic, powerful component, `/src/components/report/AnalysisCard.tsx`.
    *   This card will be designed to beautifully render the data from any section of our JSON (e.g., "Hydration," "Wrinkles," "Pigmentation").
    *   It will include a dedicated component for the **"Score Gauge"**â€”a circular progress bar that visually represents scores from 0-100.
*   **Task 3.2: Build the "Surface," "Deep Structure," and "Aging" Tabs**
    *   Using the `AnalysisCard` component, we will build out the UI for these three tabs by mapping over the relevant sections of our static JSON data.

---

### **Phase 4: The 3D Model Foundation**

**Goal:** To render the basic, interactive 3D wireframe of the client's face.

*   **Task 4.1: Integrate Three.js**
    *   We will install `three` and `@react-three/fiber`, the standard libraries for 3D in React.
*   **Task 4.2: Create the `FaceMeshModel` Component**
    *   A new component, `/src/components/report/FaceMeshModel.tsx`, will be created.
    *   Its sole purpose will be to take the 468 facial landmark points (which we will save alongside the images) and render them as a 3D wireframe mesh using Three.js.
*   **Task 4.3: Replace the Placeholder**
    *   We will replace the static image placeholder on the "Dashboard" tab with our new, live, interactive `FaceMeshModel` component.

---

### **Phase 5: "Wow-Factor" Polish & The Personalized Roadmap**

**Goal:** To implement the final, high-impact features that make the report truly exceptional.

*   **Task 5.1: Implement 3D Data Overlays**
    *   The `FaceMeshModel` component will be enhanced. It will now accept data props (e.g., the `pigmentation` object).
    *   When this data is passed, the component will "paint" the relevant polygons on the 3D mesh with different colors, visually representing the findings (e.g., blue for dehydration, red for redness).
*   **Task 5.2: Build the "Predictive Analysis" Tab**
    *   This tab will be built to showcase the AI's forecasts.
    *   It will feature a simple but effective UI with "Current" and "5-Year Projection" buttons that toggle the visibility of different text descriptions.
*   **Task 5.3: Build the "Personalized Roadmap" Tab**
    *   This final tab will be designed to look like a clean, professional, and actionable prescription. It will clearly list the recommended treatments and at-home ingredients. This screen will be optimized for being exported to a PDF.

---

### **(Future) Phase 6: Live AI Service Integration**

*   **Goal:** To swap our static mock data with a live call to the Gemini 1.5 Pro API.
*   **Plan:**
    1.  We will modify the `getAnalysisReport` function in `/src/services/reportService.ts`.
    2.  Instead of returning the mock data, it will now take the three captured images as input.
    3.  It will construct the definitive v3.0 prompt we designed.
    4.  It will make a live API call to Gemini using the Node.js SDK code you provided (the standard GenAI SDK is likely the simplest starting point).
    5.  It will receive the streaming JSON response, parse it, and return the structured data.
    *   **Because the entire UI was built against this exact data structure, no front-end changes will be required.**

